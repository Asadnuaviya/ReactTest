{"version":3,"sources":["components/ListItem.js","components/ListView.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","_this$props","item","handleCount","state","isDone","correct_answer","Answer","console","log","setState","handleAnswer","e","target","value","index","react_default","a","createElement","question","type","onChange","placeholder","name","Button","onClick","React","Component","ListView","loadData","fetch","then","response","json","data","results","records","timer","setInterval","time","getSeconds","slice","getMinutes","Math","floor","refreshData","clearInterval","count","handleResult","alert","concat","isLoading","_this2","_this$state","style","display","justifyContent","margin","variant","Spinner","animation","role","className","Table","striped","bordered","hover","responsive","map","components_ListItem","key","Layout","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","children","App","components_Layout","components_ListView","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAkDeA,cA9Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,aAAe,WAAM,IAAAC,EACWR,EAAKD,MAA3BU,EADWD,EACXC,KAAMC,EADKF,EACLE,YACVV,EAAKW,MAAMC,QAEPH,EAAKI,iBAAmBb,EAAKW,MAAMG,SACrCC,QAAQC,IAAI,8BACZN,IACAV,EAAKiB,SAAS,CAACL,QAAO,MAfXZ,EAuBnBkB,aAAe,SAACC,GAEdnB,EAAKiB,SAAS,CACZH,OAAQK,EAAEC,OAAOC,SAxBnBrB,EAAKW,MAAQ,CACXG,OAAQ,GACRF,QAAQ,GAJOZ,wEA6BV,IACCS,EAASN,KAAKJ,MAAdU,KACAa,EAAUnB,KAAKJ,MAAfuB,MACR,OACEC,EAAAC,EAAAC,cAAA,UAGEF,EAAAC,EAAAC,cAAA,UAAKH,GACLC,EAAAC,EAAAC,cAAA,UAAKhB,EAAKiB,UACVH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,SAAUzB,KAAKe,aAAcG,MAAOlB,KAAKQ,MAAMG,OAAQe,YAAY,aAAaC,KAAK,gBACxGP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,QAAS7B,KAAKI,cAAtB,kBAxCe0B,IAAMC,2BC4FdC,qBAzFb,SAAAA,EAAYpC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACjBnC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMJ,KAQRqC,SAAW,WACTC,MAAM,oFAAoFC,KAAK,SAAAC,GAC7F,OAAOA,EAASC,SAEfF,KAAK,SAAAG,GACJ1B,QAAQC,IAAIyB,EAAKC,SACjB1C,EAAKiB,SAAS,CAAE0B,QAASF,EAAKC,YAElC1C,EAAK4C,MAAQC,YAAY,kBACvB7C,EAAKiB,SAAS,CACZ6B,KAAM9C,EAAKW,MAAMmC,KAAO,KACtB,MApBW9C,EAsBnB+C,WAAa,WACX,OAAQ,IAAM/C,EAAKW,MAAMmC,KAAO,IAAIE,OAAO,IAvB1BhD,EAyBnBiD,WAAa,WACX,OAAOC,KAAKC,MAAMnD,EAAKW,MAAMmC,KAAO,KA1BnB9C,EA4BnBoD,YAAc,WACZpD,EAAKiB,SAAS,CAAE0B,QAAS,KACzBU,cAAcrD,EAAK4C,OACnB5C,EAAKiB,SAAS,CAAE6B,KAAM,IACtB9C,EAAKoC,YAhCYpC,EAmCnBU,YAAc,WACZV,EAAKiB,SAAS,CACZqC,MAAOtD,EAAKW,MAAM2C,MAAQ,KArCXtD,EAwCnBuD,aAAe,WACbF,cAAcrD,EAAK4C,OACnB5C,EAAKiB,SAAS,CAAE6B,KAAM,IACtB9C,EAAKoC,WACLoB,MAAK,kBAAAC,OAAmBzD,EAAKW,MAAM2C,MAA9B,aAAAG,OAA+CzD,EAAKW,MAAMmC,KAA1D,cA1CL9C,EAAKW,MAAQ,CACXgC,QAAS,GACTe,WAAW,EACXZ,KAAM,EACNQ,MAAO,GANQtD,wEA8CV,IAAA2D,EAAAxD,KAAAyD,EACwBzD,KAAKQ,MAA5BgC,EADDiB,EACCjB,QAASe,EADVE,EACUF,UACjB,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,OAAQ,SACtEzC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQkC,QAAQ,UAAUjC,QAAS7B,KAAKiC,UAAxC,cACAb,EAAAC,EAAAC,cAAA,kBAAUtB,KAAK8C,aAAf,IAA8B9C,KAAK4C,cACnCxB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQkC,QAAQ,UAAUjC,QAAS7B,KAAKiD,aAAxC,eAEDM,GACCnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B7C,EAAAC,EAAAC,cAAA,QAAM4C,UAAU,WAAhB,gBAIN9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,GACtCnD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,aACGkB,GAAWA,EAAQgC,IAAI,SAAClE,EAAMa,GAC7B,OAAOC,EAAAC,EAAAC,cAACmD,EAAD,CAAUC,IAAKvD,EAAOb,KAAMA,EAAM6C,MAAOK,EAAKhD,MAAM2C,MAAO5C,YAAaiD,EAAKjD,YAAaY,MAAOA,OAG5GC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQkC,QAAQ,SAASjC,QAAS7B,KAAKoD,cAAvC,mBA5EatB,IAAMC,4BCgBd4C,mLAhBX,OACEvD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MAChC1D,EAAAC,EAAAC,cAACsD,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,cACA5D,EAAAC,EAAAC,cAACsD,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B9D,EAAAC,EAAAC,cAACsD,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClBhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAKnB,UAAU,WACb9C,EAAAC,EAAAC,cAAC+D,EAAA,EAAIC,KAAL,CAAUN,KAAK,aAIVhF,KAAKJ,MAAM2F,iBAbDzD,IAAMC,iBCYZyD,MAVf,WACE,OACEpE,EAAAC,EAAAC,cAAA,OAAK4C,UAAU,OACb9C,EAAAC,EAAAC,cAACmE,EAAD,KACErE,EAAAC,EAAAC,cAACoE,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAK,SAAAqE,GACjCA,EAAaC","file":"static/js/main.57bb66b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass ListItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Answer: '',\r\n      isDone: true\r\n    }\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    const { item, handleCount } = this.props;\r\n    if (this.state.isDone) {\r\n      {\r\n        if (item.correct_answer === this.state.Answer) {\r\n          console.log('Reached the props of count')\r\n          handleCount();\r\n          this.setState({isDone:false})\r\n        }\r\n      }\r\n    }\r\n    // this.setState({\r\n    //   count: [...this.state.count, ...this.state.Answer]\r\n    // })\r\n  }\r\n  handleAnswer = (e) => {\r\n\r\n    this.setState({\r\n      Answer: e.target.value,\r\n    })\r\n  }\r\n  render() {\r\n    const { item } = this.props;\r\n    const { index } = this.props;\r\n    return (\r\n      <tr>\r\n\r\n\r\n        <td>{index}</td>\r\n        <td>{item.question}</td>\r\n        <input type=\"text\" onChange={this.handleAnswer} value={this.state.Answer} placeholder=\"True/False\" name=\"answerField\" />\r\n        <Button onClick={this.handleSubmit}>Submit</Button>\r\n        {/* <td>{(item.correct_answer && this.state.Answer) ? this.setState({state: this.state.count + 1}) : null }</td> */}\r\n\r\n      </tr>\r\n    )\r\n  }\r\n}\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from './ListItem';\r\nimport { Button, Table, Spinner } from 'react-bootstrap';\r\nimport Popup from \"reactjs-popup\";\r\n\r\nclass ListView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      records: [],\r\n      isLoading: false,\r\n      time: 0,\r\n      count: 0\r\n    }\r\n  }\r\n  loadData = () => {\r\n    fetch('https://opentdb.com/api.php?amount=10&category=18&difficulty=medium&type=boolean').then(response => {\r\n      return response.json()\r\n    })\r\n      .then(data => {\r\n        console.log(data.results)\r\n        this.setState({ records: data.results })\r\n      })\r\n    this.timer = setInterval(() =>\r\n      this.setState({\r\n        time: this.state.time + 1\r\n      }), 1000)\r\n  }\r\n  getSeconds = () => {\r\n    return ('0' + this.state.time % 60).slice(-2);\r\n  }\r\n  getMinutes = () => {\r\n    return Math.floor(this.state.time / 60)\r\n  }\r\n  refreshData = () => {\r\n    this.setState({ records: [] });\r\n    clearInterval(this.timer)\r\n    this.setState({ time: 0 })\r\n    this.loadData();\r\n\r\n  }\r\n  handleCount = () => {\r\n    this.setState({\r\n      count: this.state.count + 1\r\n    })\r\n  }\r\n  handleResult = () => {\r\n    clearInterval(this.timer);\r\n    this.setState({ time: 0 });\r\n    this.loadData();\r\n    alert(`Your result is ${this.state.count} in time ${this.state.time} seconds`);\r\n  }\r\n  render() {\r\n    const { records, isLoading } = this.state;\r\n    return (\r\n      <div>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', margin: '20px' }}>\r\n          <Button variant=\"primary\" onClick={this.loadData}>Start Quiz</Button>\r\n          <h1>Time {this.getMinutes()}:{this.getSeconds()}</h1>\r\n          <Button variant=\"success\" onClick={this.refreshData}>Play Again</Button>\r\n        </div>\r\n        {isLoading &&\r\n          <div>\r\n            <Spinner animation=\"border\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n          </div>\r\n        }\r\n        <Table striped bordered hover responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>Index</th>\r\n              <th>Questions</th>\r\n              <th>Answers</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {records && records.map((item, index) => {\r\n              return <ListItem key={index} item={item} count={this.state.count} handleCount={this.handleCount} index={index} />\r\n            })}\r\n          </tbody>\r\n          <Button variant=\"danger\" onClick={this.handleResult}>Submit</Button>\r\n          {/* <Popup trigger={<button onClick={this.handleResult}> Show Result </button>}\r\n            modal\r\n            closeOnDocumentClick\r\n  \r\n          >\r\n            <span> Your result is {this.state.count} in time {this.state.time} seconds </span>\r\n\r\n          </Popup> */}\r\n        </Table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default ListView;","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nclass Layout extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n  <Navbar.Brand href=\"#home\">Alex Felix</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link href=\"#home\"></Nav.Link>\r\n    </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n          {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Layout;","import React from 'react';\nimport ListView from './components/ListView';\nimport Layout from './components/Layout';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <ListView />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}